(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{559:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("本文是记录在 "),t("code",[s._v("Rust")]),s._v(" 学习笔记，学完结束。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://course.rs",target:"_blank",rel:"noopener noreferrer"}},[s._v("Rust 语言圣经(Rust Course)"),t("OutboundLink")],1)]),s._v(" "),t("ul",[t("li",[t("code",[s._v("240305")]),s._v(" 进度到了 "),t("code",[s._v("2.3.1")]),s._v("，脑子被绕懵了，课后作业有一说一不错 😂")]),s._v(" "),t("li",[t("code",[s._v("240718")]),s._v(" 进度到了 "),t("code",[s._v("2.4.3")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240718")]),s._v(" 进度到了 "),t("code",[s._v("2.4.4")])]),s._v(" "),t("li",[t("code",[s._v("240719")]),s._v(" 进度到了 "),t("code",[s._v("2.4.5")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240719")]),s._v(" 进度到了 "),t("code",[s._v("2.5")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240720")]),s._v(" 进度到了 "),t("code",[s._v("2.6.1")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240724")]),s._v(" 进度到了 "),t("code",[s._v("2.6.2")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240724")]),s._v(" 进度到了 "),t("code",[s._v("2.6.3")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240724")]),s._v(" 进度到了 "),t("code",[s._v("2.6.4")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240725")]),s._v(" 进度到了 "),t("code",[s._v("2.7")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240726")]),s._v(" 进度到了 "),t("code",[s._v("2.8.1")]),s._v("，习题做完")]),s._v(" "),t("li",[t("code",[s._v("240803")]),s._v(" 进度到了 "),t("code",[s._v("2.8.2")]),s._v("，习题做完")])]),s._v(" "),t("InArticleAdsense",{attrs:{"data-ad-client":"ca-pub-1725717718088510","data-ad-slot":"4281148213"}}),s._v(" "),t("h2",{attrs:{id:"浮点陷阱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点陷阱"}},[s._v("#")]),s._v(" 浮点陷阱")]),s._v(" "),t("ol",[t("li",[s._v("浮点数往往是你想要数字的近似表达 浮点数类型是基于二进制实现的，但是我们想要计算的数字往往是基于十进制，例如 0.1 在二进制上并不存在精确的表达形式，但是在十进制上就存在。这种不匹配性导致一定的歧义性，更多的，虽然浮点数能代表真实的数值，但是由于底层格式问题，它往往受限于定长的浮点数精度，如果你想要表达完全精准的真实数字，只有使用无限精度的浮点数才行")]),s._v(" "),t("li",[s._v("浮点数在某些特性上是反直觉的 例如大家都会觉得浮点数可以进行比较，对吧？是的，它们确实可以使用 >，>= 等进行比较，但是在某些场景下，这种直觉上的比较特性反而会害了你")])]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[s._v("避免在浮点数上测试相等性")]),s._v(" "),t("li",[s._v("当结果在数学上可能存在未定义时，需要格外的小心")])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" abc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" xyz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc (f32)"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   0.1 + 0.2: {:x}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("abc"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" abc"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("to_bits")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"         0.3: {:x}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("abc"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("to_bits")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xyz (f64)"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   0.1 + 0.2: {:x}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("xyz"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" xyz"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("to_bits")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"         0.3: {:x}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("xyz"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("to_bits")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("abc"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" abc"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" abc"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("xyz"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" xyz"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" xyz"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("输出")]),s._v(" "),t("div",{staticClass:"language-log line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-log"}},[t("code",[s._v("abc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("(")]),s._v("f32"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3e99999a")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3e99999a")]),s._v("\n\nxyz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("(")]),s._v("f64"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3fd3333333333334")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3fd3333333333333")]),s._v("\n\nthread "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'main'")]),s._v(" panicked at "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'assertion failed: xyz.0 + xyz.1 == xyz.2'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n➥ch2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("add"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("floats"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("note:")]),s._v(" run with `RUST_BACKTRACE"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("` environment variable to display\n➥a backtrace\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("blockquote",[t("p",[s._v("这是因为高精度进行加减的时候在小数点非常后的地方发生了微小的变化，导致了 "),t("code",[s._v("f64")]),s._v(" 计算的结果和原始声明的结果出现了变化，断言失败")])]),s._v(" "),t("h2",{attrs:{id:"range-序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#range-序列"}},[s._v("#")]),s._v(" "),t("code",[s._v("Range")]),s._v(" (序列)")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("左闭右开")]),s._v(" "),t("p",[t("code",[s._v("1...5")])])]),s._v(" "),t("li",[t("p",[s._v("左闭右闭")]),s._v(" "),t("p",[t("code",[s._v("1...=5")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("序列仅仅允许数字或者**字符（"),t("code",[s._v("char")]),s._v("）**类型，原因是他们可以连续")])]),s._v(" "),t("h2",{attrs:{id:"as-类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#as-类型转换"}},[s._v("#")]),s._v(" "),t("code",[s._v("As")]),s._v(" 类型转换")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中可以使用 "),t("code",[s._v("As")]),s._v(" 来完成一个类型到另一个类型的转换，其最常用于将原始类型转换为其他原始类型，但是它也可以完成诸如将指针转换为地址、地址转换为指针以及将指针转换为其他指针等功能。")]),s._v(" "),t("h2",{attrs:{id:"如何引用第三方库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何引用第三方库"}},[s._v("#")]),s._v(" 如何引用第三方库")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://crates.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Rust 库中心 —— crates.io"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[t("p",[s._v("使用 "),t("code",[s._v("cargo")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# xxx 为库名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cargo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" xxx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("操作 "),t("code",[s._v("Cargo.toml")])]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Cargo.toml")]),s._v(" 中的 "),t("code",[s._v("[dependencies]")]),s._v(" 下增加库名并指定版本")]),s._v(" "),t("div",{staticClass:"language-toml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-toml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("dependencies")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key property"}},[s._v("tauri")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.6.0"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"字符、布尔、单元类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符、布尔、单元类型"}},[s._v("#")]),s._v(" 字符、布尔、单元类型")]),s._v(" "),t("h3",{attrs:{id:"字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[s._v("#")]),s._v(" 字符")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中的字符类型代表一个 "),t("code",[s._v("Unicode")]),s._v("，"),t("code",[s._v("Unicode")]),s._v(" 占用 "),t("code",[s._v("4")]),s._v(" 个字节，所以在 "),t("code",[s._v("Rust")]),s._v(" 中字符占用 "),t("code",[s._v("4")]),s._v(" 个字节")]),s._v(" "),t("h3",{attrs:{id:"布尔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔"}},[s._v("#")]),s._v(" 布尔")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中布尔值占用内存大小为 "),t("code",[s._v("1")]),s._v(" 个字节")]),s._v(" "),t("h3",{attrs:{id:"单元类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单元类型"}},[s._v("#")]),s._v(" 单元类型")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中单元类型 "),t("code",[s._v("()")]),s._v(" 可以用来占位，如果不注入值的话并不占据字节，即空的单元类型为 "),t("code",[s._v("0")]),s._v(" 个字节")]),s._v(" "),t("p",[s._v("单元类型 "),t("code",[s._v("()")]),s._v(" 是一个零长度的元组。它没啥作用，但是可以用来表达一个函数没有返回值")]),s._v(" "),t("ul",[t("li",[s._v("函数没有返回值，那么返回一个 "),t("code",[s._v("()")])]),s._v(" "),t("li",[s._v("通过 "),t("code",[s._v(";")]),s._v(" 结尾的语句返回一个 "),t("code",[s._v("()")])])]),s._v(" "),t("h2",{attrs:{id:"语句和表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语句和表达式"}},[s._v("#")]),s._v(" 语句和表达式")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("只有表达式能返回值")])])]),s._v(" "),t("h3",{attrs:{id:"语句和表达式的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语句和表达式的区别"}},[s._v("#")]),s._v(" 语句和表达式的区别")]),s._v(" "),t("ul",[t("li",[s._v("初级理解\n"),t("ul",[t("li",[s._v("表达式不能包含分号，必须要看结尾是否有 "),t("code",[s._v(";")])]),s._v(" "),t("li",[s._v("是否在进行赋值(形态上看看就好)，如果没有 "),t("code",[s._v(";")]),s._v(" 以上面的一条为主")]),s._v(" "),t("li",[s._v("表达式总要返回值，如果没有返回值会隐式的返回一个单元类型 "),t("code",[s._v("()")])]),s._v(" "),t("li",[t("code",[s._v("macro")]),s._v(" 是例外")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("中级理解还没达到那个能耐，等到达了再写吧")])]),s._v(" "),t("p",[s._v("我在"),t("a",{attrs:{href:"https://practice-zh.course.rs/basic-types/statements-expressions.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("Rust")]),s._v(" 联系实践"),t("OutboundLink")],1),s._v("中发现第一题的两种方式可以使其运行起来，但是有个疑惑点没有想通")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// eg1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// eg2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// eg3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("为什么在 "),t("code",[s._v("eg1")]),s._v(" 中 "),t("code",[s._v("x += 2")]),s._v(" 返回的是单元类型 "),t("code",[s._v("()")]),s._v("，而在 "),t("code",[s._v("eg2")]),s._v(" 中返回的是 "),t("code",[s._v("i32")]),s._v(" 类型")]),s._v(" "),t("p",[t("strong",[s._v("悟了")]),s._v("，这里面有个坑 "),t("code",[s._v("x += 2")]),s._v(" 等价于 "),t("code",[s._v("x = x + 2")]),s._v(" 所以这个表达式其实是一个赋值的代码，赋值的代码并不是一个变量数据，所以返回的是一个单元类型 "),t("code",[s._v("()")]),s._v("，所以我新增的 "),t("code",[s._v("eg3")]),s._v(" 也是可以正常运行的")])])]),s._v(" "),t("h2",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),t("h3",{attrs:{id:"函数要点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数要点"}},[s._v("#")]),s._v(" 函数要点")]),s._v(" "),t("ul",[t("li",[s._v("函数名和变量名使用蛇形命名法 "),t("code",[s._v("(snake case)")]),s._v(" ，例如 "),t("code",[s._v("fn add_two() -> {}")])]),s._v(" "),t("li",[s._v("函数的位置可以随便放，"),t("code",[s._v("Rust")]),s._v(" 不关心我们在哪里定义了函数，只要有定义即可")]),s._v(" "),t("li",[s._v("每个函数参数都需要标注类型")])]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("Rust")]),s._v(" 中只允许从函数体中使用 "),t("code",[s._v("return")]),s._v(" 语句返回,而这里是一个代码块,只能使用表达式的值作为返回。")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("永不返回的发散函数 "),t("code",[s._v("!")]),s._v("，当用 "),t("code",[s._v("!")]),s._v(" 作函数返回类型的时候，表示该函数永不返回( "),t("code",[s._v("diverge function")]),s._v(" )，特别的，这种语法往往用做会导致程序崩溃的函数")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dead_end")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("panic!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你已经到了穷途末路，崩溃吧！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"匿名函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[s._v("#")]),s._v(" 匿名函数")]),s._v(" "),t("h4",{attrs:{id:"如何理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何理解"}},[s._v("#")]),s._v(" 如何理解")]),s._v(" "),t("ol",[t("li",[s._v("当匿名函数体内最后一个表达式没有分号时,该匿名函数会返回这个最后一个表达式的值。")]),s._v(" "),t("li",[s._v("当最后一个表达式有分号或不存在时,该匿名函数会返回 "),t("code",[s._v("()")]),s._v(" 单元类型。")]),s._v(" "),t("li",[s._v("因为根据 "),t("code",[s._v("Rust")]),s._v(" 的规则,默认返回 "),t("code",[s._v("()")]),s._v("。")])]),s._v(" "),t("h2",{attrs:{id:"所有权和借用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所有权和借用"}},[s._v("#")]),s._v(" 所有权和借用")]),s._v(" "),t("h3",{attrs:{id:"所有权"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所有权"}},[s._v("#")]),s._v(" 所有权")]),s._v(" "),t("h4",{attrs:{id:"所有权原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所有权原则"}},[s._v("#")]),s._v(" 所有权原则")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("Rust")]),s._v(" 中每一个值都被一个变量所拥有，该变量被称为值的所有者")]),s._v(" "),t("li",[t("strong",[s._v("一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者")])]),s._v(" "),t("li",[s._v("当所有者(变量)离开作用域范围时，这个值将被丢弃("),t("code",[s._v("drop")]),s._v(")")])]),s._v(" "),t("h4",{attrs:{id:"栈-stack-与堆-heap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack-与堆-heap"}},[s._v("#")]),s._v(" 栈("),t("code",[s._v("Stack")]),s._v(")与堆("),t("code",[s._v("Heap")]),s._v(")")]),s._v(" "),t("blockquote",[t("p",[s._v("栈和堆的核心目标就是为程序在运行时提供可供使用的内存空间")])]),s._v(" "),t("h5",{attrs:{id:"栈-stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[s._v("#")]),s._v(" 栈("),t("code",[s._v("Stack")]),s._v(")")]),s._v(" "),t("ul",[t("li",[s._v("栈按照顺序存储值并以相反顺序取出值，这也被称作"),t("strong",[s._v("后进先出")]),s._v("、"),t("strong",[s._v("先进后出")])]),s._v(" "),t("li",[s._v("增加数据叫做"),t("strong",[s._v("进栈")]),s._v("，移出数据则叫做"),t("strong",[s._v("出栈")])]),s._v(" "),t("li",[s._v("栈中的所有数据都"),t("strong",[s._v("必须")]),s._v("占用已知且固定大小的内存空间")])]),s._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("笔记")]),s._v(" "),t("p",[s._v("想象一下一叠盘子：当增加更多盘子时，把它们放在盘子堆的顶部，当需要盘子时，再从顶部拿走。不能从中间也不能从底部增加或拿走盘子！")])]),s._v(" "),t("h5",{attrs:{id:"堆-heap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[s._v("#")]),s._v(" 堆("),t("code",[s._v("Heap")]),s._v(")")]),s._v(" "),t("blockquote",[t("p",[s._v("对于大小未知或者可能变化的数据，将它存储在堆上")])]),s._v(" "),t("p",[s._v("当向堆上放入数据时，需要请求一定大小的内存空间。操作系统在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的指针, 该过程被称为在堆上分配内存，有时简称为 “分配”("),t("code",[s._v("allocating")]),s._v(")，然后该指针会被推入栈中，因为指针的大小是已知且固定的，在后续使用过程中，你将通过栈中的指针，来获取数据在堆上的实际内存位置，进而访问该数据")]),s._v(" "),t("p",[s._v("我个人的理解就是书籍的目录「栈」对应页码，然后寻找具体章节「堆」的过程")]),s._v(" "),t("h5",{attrs:{id:"性能区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能区别"}},[s._v("#")]),s._v(" 性能区别")]),s._v(" "),t("p",[s._v("在栈上分配内存比在堆上分配内存要快，因为入栈时操作系统无需进行函数调用（或更慢的系统调用）来分配新的空间，只需要将新数据放入栈顶即可。相比之下，在堆上分配内存则需要更多的工作，这是因为操作系统必须首先找到一块足够存放数据的内存空间，接着做一些记录为下一次分配做准备，如果当前进程分配的内存页不足时，还需要进行系统调用来申请更多内存。 因此，处理器在栈上分配数据会比在堆上分配数据更加高效。")]),s._v(" "),t("h5",{attrs:{id:"所有权与堆栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所有权与堆栈"}},[s._v("#")]),s._v(" 所有权与堆栈")]),s._v(" "),t("p",[s._v("当代码调用的某一个函数的时候，传递的参数会被依次压入栈中，当函数执行完毕后这些参数会按照"),t("strong",[s._v("后进先出")]),s._v("的原则依次移除")]),s._v(" "),t("p",[s._v("因为堆上的数据缺乏组织，因此跟踪这些数据何时分配和释放是非常重要的，否则堆上的数据将产生内存泄漏 —— 这些数据将永远无法被回收。这就是 "),t("code",[s._v("Rust")]),s._v(" 所有权系统为我们提供的强大保障。在 "),t("code",[s._v("Rust")]),s._v(" 中，明白堆栈的原理，对于我们理解所有权的工作原理会有很大的帮助")]),s._v(" "),t("p",[t("strong",[s._v("当所有权转移时，可变性也可以随之改变")]),s._v("，也就是说新的变量拥有所有权的时候它是不可变的，如果要进行改变需要加上 "),t("code",[s._v("mut")]),s._v(" 关键字")]),s._v(" "),t("blockquote",[t("p",[s._v("我想到一个情况，如果按这个逻辑来看的话，那么在写 "),t("code",[s._v("rust")]),s._v(" 代码时传递参数时，是否需要让容量比较高的参数放在后面，使其在删除的时候更早的删除")])]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("如何声明一个 "),t("code",[s._v("String")]),s._v(" 类型的变量")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 是一个指向字符串的指针，类型是 &str")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 是一个指向字符串的指针，类型是 String")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[t("code",[s._v("::")]),s._v(" 是一种调用操作符，这里表示调用 "),t("code",[s._v("String")]),s._v(" 模块中的 "),t("code",[s._v("from")]),s._v(" 方法，由于 "),t("code",[s._v("String")]),s._v(" 类型存储在堆上，因此它是动态的\n:::")])]),s._v(" "),t("h3",{attrs:{id:"变量绑定背后的数据交互"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量绑定背后的数据交互"}},[s._v("#")]),s._v(" 变量绑定背后的数据交互")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：基本类型是存储在「栈」上的，而复杂类型是存储在「堆」上的\n基本的数据类型有：")]),s._v(" "),t("ol",[t("li",[s._v("数值类型: 有符号整数 ("),t("code",[s._v("i8")]),s._v(", "),t("code",[s._v("i16")]),s._v(", "),t("code",[s._v("i32")]),s._v(", "),t("code",[s._v("i64")]),s._v(", "),t("code",[s._v("isize")]),s._v(")、 无符号整数 ("),t("code",[s._v("u8")]),s._v(", "),t("code",[s._v("u16")]),s._v(", "),t("code",[s._v("u32")]),s._v(", "),t("code",[s._v("u64")]),s._v(", "),t("code",[s._v("usize")]),s._v(") 、浮点数 ("),t("code",[s._v("f32")]),s._v(", "),t("code",[s._v("f64")]),s._v(")、以及有理数、复数")]),s._v(" "),t("li",[s._v("字符串：字符串字面量和字符串切片 "),t("code",[s._v("&str")])]),s._v(" "),t("li",[s._v("布尔类型： "),t("code",[s._v("true")]),s._v(" 和 "),t("code",[s._v("false")])]),s._v(" "),t("li",[s._v("字符类型: 表示单个 "),t("code",[s._v("Unicode")]),s._v(" 字符，存储为 4 个字节")]),s._v(" "),t("li",[s._v("单元类型: 即 "),t("code",[s._v("()")]),s._v(" ，其唯一的值也是 "),t("code",[s._v("()")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("注意：\n当变量离开作用域的时候 "),t("code",[s._v("Rust")]),s._v(" 会自动调用 "),t("code",[s._v("drop")]),s._v(" 来清理变量的堆内存。如果两个变量指向到了同一个位置的话，那么这个时候就会陷入一个问题，因为 "),t("code",[s._v("Rust")]),s._v(" 会调用两次 "),t("code",[s._v("drop")]),s._v("，这样就会导致程序崩溃，所以 "),t("code",[s._v("Rust")]),s._v(" 会自动调用 "),t("code",[s._v("drop")]),s._v(" 的时候会将变量的所有权转移给另一个变量，这样就不会出现两次 "),t("code",[s._v("drop")]),s._v(" 的问题。这样的情况叫做：二次释放（"),t("code",[s._v("double free")]),s._v("）")])]),s._v(" "),t("h4",{attrs:{id:"实战解说"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战解说"}},[s._v("#")]),s._v(" 实战解说")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("上面的代码中，"),t("code",[s._v("s1")]),s._v(" 赋值给了 "),t("code",[s._v("s2")]),s._v(" 后，"),t("code",[s._v("Rust")]),s._v(" 就认为 "),t("code",[s._v("s1")]),s._v(" 不再有效，因此在 "),t("code",[s._v("s1")]),s._v(" 离开作用域的时候 "),t("code",[s._v("Rust")]),s._v(" 不会 "),t("code",[s._v("drop")]),s._v(" 任何东西。如果这时候要对 "),t("code",[s._v("s1")]),s._v(" 进行操作的时候就会提示 "),t("code",[s._v("borrow of moved value: 's1'")]),s._v("，这是因为 "),t("code",[s._v("s1")]),s._v(" 已经不再有效了，"),t("code",[s._v("Rust")]),s._v(" 禁止使用无效的引用。")]),s._v(" "),t("p",[s._v("但是，下面的代码是可以正常运行的，原因是 "),t("code",[s._v("s2")]),s._v(" 是 "),t("code",[s._v("s1")]),s._v(" 的一个引用，所以 "),t("code",[s._v("s2")]),s._v(" 的值是 "),t("code",[s._v("s1")]),s._v(" 的一个引用，所以 "),t("code",[s._v("s1")]),s._v(" 离开作用域的时候 "),t("code",[s._v("Rust")]),s._v(" 不会 "),t("code",[s._v("drop")]),s._v(" 任何东西")]),s._v(" "),t("p",[s._v("我个人理解的是基础类型数据是存储在栈上的，所以 "),t("code",[s._v("s1")]),s._v(" 在赋值给 "),t("code",[s._v("s2")]),s._v(" 的时候实际上是使用了一次拷贝的过程，直接将整个数据给了一份给 "),t("code",[s._v("s2")]),s._v(" 在栈上创建了。")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x = {}, y = {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("任何基本类型的组合可以 "),t("code",[s._v("Copy")]),s._v(" ，不需要分配内存或某种形式资源的类型是可以 "),t("code",[s._v("Copy")]),s._v(" 的")])]),s._v(" "),t("p",[s._v("可以 "),t("code",[s._v("Copy")]),s._v(" 的类型:")]),s._v(" "),t("ul",[t("li",[s._v("所有整数类型")]),s._v(" "),t("li",[s._v("布尔类型")]),s._v(" "),t("li",[s._v("所有浮点数类型")]),s._v(" "),t("li",[s._v("字符类型")]),s._v(" "),t("li",[s._v("元组，当且仅当其包含的类型也都是 "),t("code",[s._v("Copy")]),s._v(" 的时候。比如，("),t("code",[s._v("i32")]),s._v(", "),t("code",[s._v("i32")]),s._v(") 是 Copy 的，但 ("),t("code",[s._v("i32")]),s._v(", "),t("code",[s._v("String")]),s._v(") 就不是")]),s._v(" "),t("li",[s._v("不可变引用 &T，"),t("strong",[s._v("但是注意: 可变引用 "),t("code",[s._v("&mut T")]),s._v(" 是不可以 "),t("code",[s._v("Copy")]),s._v(" 的")])])]),s._v(" "),t("blockquote",[t("p",[s._v("所以我简单的理解为 凡是以上类型进行赋值的行为可以认为是在进行 "),t("code",[s._v("Copy")]),s._v(" 操作")])]),s._v(" "),t("h3",{attrs:{id:"引用与借用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用与借用"}},[s._v("#")]),s._v(" 引用与借用")]),s._v(" "),t("h4",{attrs:{id:"引用与解引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用与解引用"}},[s._v("#")]),s._v(" 引用与解引用")]),s._v(" "),t("p",[s._v("常规引用是一个指针类型，指向了对象存储的内存地址，也就是使用 "),t("code",[s._v("&")]),s._v(" 符号来创建一个引用，这个引用是不可变的，也就是说不能修改引用的值，但是可以修改引用的指向。")]),s._v(" "),t("p",[s._v("必须使用 "),t("code",[s._v("*y")]),s._v(" 来解出引用所指向的值（也就是"),t("strong",[s._v("解引用")]),s._v("）")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"不可变引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不可变引用"}},[s._v("#")]),s._v(" 不可变引用")]),s._v(" "),t("p",[t("code",[s._v("&")]),s._v(" 符号即是引用，它们允许你使用值，但是不获取所有权，也就是新的变量离开作用域的时候这个引用即失效，但原始的数据不会 "),t("code",[s._v("drop")])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("calculate_length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"The length of '{}' is {}.\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("calculate_length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h4",{attrs:{id:"可变引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变引用"}},[s._v("#")]),s._v(" 可变引用")]),s._v(" "),t("p",[s._v("如果要在 "),t("code",[s._v("calculate_length")]),s._v(" 函数中改变 "),t("code",[s._v("s")]),s._v(" 的值操作如下")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("calculate_length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"The length of '{}' is {}.\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("calculate_length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push_str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('",word"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("blockquote",[t("p",[s._v("注意：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("可变引用同时只能存在一个")])]),s._v(" "),t("li",[t("strong",[s._v("同一作用域，特定数据只能有一个可变引用")])])])]),s._v(" "),t("p",[s._v("我理解的是，当 "),t("code",[s._v("a")]),s._v(" 被声明可变变量("),t("code",[s._v("mut")]),s._v(")时，"),t("code",[s._v("b")]),s._v(" 进行可变引用这个时候是"),t("strong",[s._v("允许")]),s._v("的，但是"),t("strong",[s._v("同时")]),s._v(" "),t("code",[s._v("c")]),s._v(" 也进行了可变引用，这时候是"),t("strong",[s._v("不允许")]),s._v("的")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 在编译初期就会进行上面的检查，即 "),t("code",[s._v("borrow checker")]),s._v("，该检查的好处：")]),s._v(" "),t("ul",[t("li",[s._v("两个或更多的指针同时访问同一数据")]),s._v(" "),t("li",[s._v("至少有一个指针被用来写入数据")]),s._v(" "),t("li",[s._v("没有同步数据访问的机制")]),s._v(" "),t("li",[s._v("减少后期在运行时出现数据交叉的问题")])]),s._v(" "),t("p",[s._v("如果一定要在一个函数中对某个变量进行多次可变引用的话，可以使用大括号来对上一个可变引用进行作用域的限制")]),s._v(" "),t("h4",{attrs:{id:"可变引用与不可变引用不能同时存在"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变引用与不可变引用不能同时存在"}},[s._v("#")]),s._v(" 可变引用与不可变引用不能同时存在")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里在编译器中直接就会报错，提示'无法借用不可变局部变量 `a` 作为可变变量'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这就相当于你把车借给你的朋友开，结果你的朋友又借给他的朋友，这时候你朋友的朋友借走了，他想把车改一改，这时候作为车主的你肯定是不会愿意的")]),s._v(" "),t("p",[s._v("如果你想让 "),t("code",[s._v("d")]),s._v(" 能够使用 "),t("code",[s._v("a")]),s._v(" 的值并作出改变的话，那么这时候你需要使用 "),t("code",[s._v("clone")])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("code",[s._v("ref")]),s._v(" 与 "),t("code",[s._v("&")]),s._v(" 类似，可以用来获取一个值的引用，但是它们的用法有所不同。通常情况下是直接将变量赋值的时候发现需要进行引用时使用 "),t("code",[s._v("ref")])]),s._v(" "),t("div",{staticClass:"language-Rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'中'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" r1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 填写空白处，但是不要修改其它行的代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ref")]),s._v(" r2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("r1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("r2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("blockquote",[t("p",[t("code",[s._v("Rust")]),s._v(" 是通过 "),t("code",[s._v("NLL(Non-Lexical Lifetimes)")]),s._v(" 来进行编译器的优化")])]),s._v(" "),t("h4",{attrs:{id:"垂直引用-dangling-references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垂直引用-dangling-references"}},[s._v("#")]),s._v(" 垂直引用("),t("code",[s._v("Dangling References")]),s._v(")")]),s._v(" "),t("p",[s._v("悬垂引用也叫做悬垂指针，意思为指针指向某个值后，这个值被释放掉了，而指针仍然存在，其指向的内存可能不存在任何值或已被其它变量重新使用。在 "),t("code",[s._v("Rust")]),s._v(" 中编译器可以确保引用"),t("strong",[s._v("永远也不会变成悬垂状态")]),s._v("：当你获取数据的引用后，编译器可以确保数据不会在引用结束前被释放，要想释放数据，必须先停止其引用的使用。")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reference_to_nothing "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dangle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dangle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("上面这段代码在 "),t("code",[s._v("dangle")]),s._v(" 函数中返回了指针地址，但是因为 "),t("code",[s._v("dangle")]),s._v(" 函数结束了，导致 "),t("code",[s._v("s")]),s._v(" 这个变量要被销毁，所以编辑器直接会提示「缺少生命周期说明符」，即代码进行了垂直引用")]),s._v(" "),t("h3",{attrs:{id:"借用规则总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#借用规则总结"}},[s._v("#")]),s._v(" 借用规则总结")]),s._v(" "),t("ul",[t("li",[s._v("同一时刻，你只能拥有要么一个可变引用, 要么任意多个不可变引用")]),s._v(" "),t("li",[s._v("引用必须总是有效的")])]),s._v(" "),t("h2",{attrs:{id:"复合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复合类型"}},[s._v("#")]),s._v(" 复合类型")]),s._v(" "),t("blockquote",[t("p",[s._v("如果在 "),t("code",[s._v("Rust")]),s._v(" 代码中存在声明后未使用的，那么需要进行「"),t("strong",[s._v("编译器属性标记")]),s._v("」，即引入 "),t("code",[s._v("#![allow(unused_variables)]")])])]),s._v(" "),t("h3",{attrs:{id:"切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[s._v("#")]),s._v(" 切片")]),s._v(" "),t("p",[s._v("创建切片的语法，使用方括号包括的一个序列："),t("strong",[s._v("[开始索引..终止索引]")])]),s._v(" "),t("div",{staticClass:"language-Rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" empty_silce_i32"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" empty_silce_str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("取值：")]),s._v(" "),t("div",{staticClass:"language-Rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取字符串s的前两位")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等效上一行的写法")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取字符串的第四位到最后一位")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等效上一行的写法")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取完整的字符串")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等效上两行的写法")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("blockquote",[t("p",[s._v("注意：\n"),t("code",[s._v("Rust")]),s._v(" 在提取中文的时候要注意一个中文占三个字节，如何操作请看"),t("a",{attrs:{href:"###%E5%88%87%E7%89%87"}},[s._v("这里")]),s._v(" //todo")])]),s._v(" "),t("div",{staticClass:"language-Rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"中国人"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 9")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("字符串切片的类型标识是 "),t("code",[s._v("&str")])]),s._v("，所以函数在返回切片时可以直接返回 "),t("code",[s._v("&str")])]),s._v(" "),t("h4",{attrs:{id:"字符串字面量是切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面量是切片"}},[s._v("#")]),s._v(" 字符串字面量是切片")]),s._v(" "),t("p",[t("code",[s._v('let a = "Hello, world!";')]),s._v(" "),t("code",[s._v("a")]),s._v(" 的实际类型是 "),t("code",[s._v("&str")])]),s._v(" "),t("p",[t("strong",[t("code",[s._v("Rust")]),s._v(" 中的字符是 "),t("code",[s._v("Unicode")]),s._v(" 类型，因此每个字符占据 "),t("code",[s._v("4")]),s._v(" 个字节内存空间，但是在字符串中不一样，字符串是 "),t("code",[s._v("UTF-8")]),s._v(" 编码，也就是字符串中的字符所占的字节数是变化的("),t("code",[s._v("1 - 4")]),s._v(")")])]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 在语言级别，只有一种字符串类型： "),t("code",[s._v("str")]),s._v("，它通常是以引用类型出现 "),t("code",[s._v("&str")]),s._v("，也就是上文提到的字符串切片。所以在 "),t("code",[s._v("Rust")]),s._v(" 中提到字符串时，往往指的就是 "),t("code",[s._v("String")]),s._v(" 类型和 "),t("code",[s._v("&str")]),s._v(" 字符串切片类型，这两个类型都是 "),t("code",[s._v("UTF-8")]),s._v(" 编码")]),s._v(" "),t("h5",{attrs:{id:"string-与-str-的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-与-str-的转换"}},[s._v("#")]),s._v(" "),t("code",[s._v("String")]),s._v(" 与 "),t("code",[s._v("&str")]),s._v(" 的转换")]),s._v(" "),t("p",[t("code",[s._v("&str")]),s._v(" 转 "),t("code",[s._v("String")])]),s._v(" "),t("div",{staticClass:"language-Rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 或")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("to_string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("String")]),s._v(" 转 "),t("code",[s._v("&str")])]),s._v(" "),t("blockquote",[t("p",[s._v("取引用即可")])]),s._v(" "),t("div",{staticClass:"language-Rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明一个 String 类型的数据")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello,world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 &str 类型数据")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("as_str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"字符串索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串索引"}},[s._v("#")]),s._v(" 字符串索引")]),s._v(" "),t("blockquote",[t("p",[s._v("在 "),t("code",[s._v("Rust")]),s._v(" 的字符串中通过索引的方式访问字符串的某个字符或者子串是"),t("strong",[s._v("失败")]),s._v("的，原因是 "),t("code",[s._v("Rust")]),s._v(" 的字符串实际上存储的是[ "),t("code",[s._v("u8")]),s._v(" ]，一个字节数组。在通过索引区间来访问字符串时要"),t("strong",[s._v("格外注意")])])]),s._v(" "),t("h4",{attrs:{id:"操作字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作字符串"}},[s._v("#")]),s._v(" 操作字符串")]),s._v(" "),t("h5",{attrs:{id:"追加-push"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#追加-push"}},[s._v("#")]),s._v(" 追加("),t("code",[s._v("Push")]),s._v(")")]),s._v(" "),t("p",[s._v("字符串"),t("strong",[s._v("尾部")]),s._v("可以使用 "),t("code",[s._v("push()")]),s._v(" 方法追加字符 "),t("code",[s._v("char")]),s._v("，也可以使用 "),t("code",[s._v("push_str()")]),s._v(" 方法追加字符串字面量，想要改变当前变量的字符串时变量必须加上 "),t("code",[s._v("mut")]),s._v(" 关键字修饰。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：上述的两种方案都是在"),t("strong",[s._v("原有的字符串上追加，但不会返回新的字符串")]),s._v("，当然，在编辑器中也是不予通过的")])]),s._v(" "),t("h5",{attrs:{id:"插入-insert"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入-insert"}},[s._v("#")]),s._v(" 插入("),t("code",[s._v("Insert")]),s._v(")")]),s._v(" "),t("p",[s._v("可以使用 "),t("code",[s._v("insert()")]),s._v(" 方法插入单个字符 "),t("code",[s._v("char")]),s._v(" 或使用 "),t("code",[s._v("insert_str()")]),s._v(" 插入字符串字面量，同样的，原始函数变量需要使用 "),t("code",[s._v("mut")]),s._v(" 关键字修饰。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：插入时使用索引时也需要注意中文占位的情况")])]),s._v(" "),t("h5",{attrs:{id:"替换-replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#替换-replace"}},[s._v("#")]),s._v(" 替换("),t("code",[s._v("Replace")]),s._v(")")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("replace")])]),s._v(" "),t("ul",[t("li",[s._v("该方法"),t("strong",[s._v("可适用于 "),t("code",[s._v("String")]),s._v(" 和 "),t("code",[s._v("&str")]),s._v(" 类型")]),s._v("。"),t("code",[s._v("replace()")]),s._v(" 方法接收两个参数，第一个参数是"),t("strong",[s._v("要被替换的字符串")]),s._v("，第二个参数是"),t("strong",[s._v("新的字符串")]),s._v("。该方法会替换所有匹配到的字符串。该方法是返回一个新的字符串，而不是操作原来的字符串。")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("replacen")])]),s._v(" "),t("ul",[t("li",[s._v("该方法"),t("strong",[s._v("可适用于 "),t("code",[s._v("String")]),s._v(" 和 "),t("code",[s._v("&str")]),s._v(" 类型")]),s._v("。"),t("code",[s._v("replacen()")]),s._v(" 方法接收三个参数，前两个参数与 "),t("code",[s._v("replace()")]),s._v(" 方法一样，第三个参数则表示替换的个数。该方法是"),t("strong",[s._v("返回一个新的字符串，而不是操作原来的字符串")]),s._v("。")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("replace_range")])]),s._v(" "),t("ul",[t("li",[s._v("该方法"),t("strong",[s._v("仅适用于 "),t("code",[s._v("String")]),s._v(" 类型")]),t("code",[s._v("。replace_range")]),s._v(" 接收两个参数，第一个参数是要"),t("strong",[s._v("替换字符串的范围（"),t("code",[s._v("Range")]),s._v("）")]),s._v("，第二个参数是"),t("strong",[s._v("新的字符串")]),s._v("。该方法是直接操作原来的字符串，"),t("strong",[s._v("不会返回新的字符串")]),s._v("。该方法需要使用 "),t("code",[s._v("mut")]),s._v(" 关键字修饰。")])])]),s._v(" "),t("li",[t("p",[s._v("删除 ("),t("code",[s._v("Delete")]),s._v(")")]),s._v(" "),t("blockquote",[t("p",[s._v("与字符串删除相关的方法有 "),t("code",[s._v("4")]),s._v(" 个，它们分别是 "),t("code",[s._v("pop()")]),s._v("，"),t("code",[s._v("remove()")]),s._v("，"),t("code",[s._v("truncate()")]),s._v("，"),t("code",[s._v("clear()")]),s._v("。这四个方法仅适用于 "),t("code",[s._v("String")]),s._v(" 类型。")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("pop")]),s._v(" —— 删除并返回字符串的最后一个字符")]),s._v(" "),t("p",[t("strong",[s._v("该方法是直接操作原来的字符串")]),s._v("，存在返回值，其返回值是一个 "),t("code",[s._v("Option")]),s._v(" 类型，如果字符串为空，则返回 "),t("code",[s._v("None")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("remove")]),s._v(" ——删除并返回字符串中指定位置的字符")]),s._v(" "),t("p",[t("strong",[s._v("该方法是直接操作原来的字符串")]),s._v("，存在返回值，其返回值是删除位置的字符串，只接收一个参数，表示该字符起始索引位置。"),t("code",[s._v("remove()")]),s._v(" 方法是按照字节来处理字符串的，如果参数所给的位置不是合法的字符边界，则会发生错误。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("truncate")]),s._v(" ——删除字符串中从指定位置开始到结尾的全部字符")]),s._v(" "),t("p",[t("strong",[s._v("该方法是直接操作原来的字符串")]),s._v("。无返回值。该方法 "),t("code",[s._v("truncate()")]),s._v(" 方法是按照字节来处理字符串的，如果参数所给的位置不是合法的字符边界，则会发生错误。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("clear")]),s._v(" —— 清空字符串")]),s._v(" "),t("p",[t("strong",[s._v("该方法是直接操作原来的字符串")]),s._v("。调用后，删除字符串中的所有字符，相当于 "),t("code",[s._v("truncate()")]),s._v(" 方法参数为 "),t("code",[s._v("0")]),s._v(" 的时候。")])])])])]),s._v(" "),t("h5",{attrs:{id:"连接-concatenate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接-concatenate"}},[s._v("#")]),s._v(" 连接 ("),t("code",[s._v("Concatenate")]),s._v(")")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("使用 "),t("code",[s._v("+")]),s._v(" 或者 "),t("code",[s._v("+=")]),s._v(" 连接字符串")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("+")]),s._v(" 或者 "),t("code",[s._v("+=")]),s._v(" 连接字符串，要求右边的参数必须为字符串的切片引用（"),t("code",[s._v("Slice")]),s._v("）类型。其实当调用 "),t("code",[s._v("+")]),s._v(" 的操作符时，相当于调用了 "),t("code",[s._v("std::string")]),s._v(" 标准库中的 "),t("code",[s._v("add()")]),s._v(" 方法，这里 "),t("code",[s._v("add()")]),s._v(" 方法的第二个参数是一个引用的类型。因此我们在使用 "),t("code",[s._v("+")]),s._v(" 时， 必须传递切片引用类型。不能直接传递 "),t("code",[s._v("String")]),s._v(" 类型。"),t("code",[s._v("+")]),s._v(" 是返回一个新的字符串，所以变量声明可以不需要 "),t("code",[s._v("mut")]),s._v(" 关键字修饰。")])]),s._v(" "),t("li",[t("p",[s._v("使用 "),t("code",[s._v("format!")]),s._v(" 连接字符串")]),s._v(" "),t("p",[t("code",[s._v("format!")]),s._v(" 这种方式适用于 "),t("code",[s._v("String")]),s._v(" 和 "),t("code",[s._v("&str")]),s._v(" 。"),t("code",[s._v("format!")]),s._v(" 的用法与 "),t("code",[s._v("print!")]),s._v(" 的用法类似")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rust"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("format!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{} {}!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])])]),s._v(" "),t("h5",{attrs:{id:"字符串转义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串转义"}},[s._v("#")]),s._v(" 字符串转义")]),s._v(" "),t("p",[s._v("通过转义的方式 "),t("code",[s._v("\\")]),s._v(" 输出 "),t("code",[s._v("ASCII")]),s._v(" 和 "),t("code",[s._v("Unicode")]),s._v(" 字符。")]),s._v(" "),t("h5",{attrs:{id:"操作-utf-8-字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作-utf-8-字符"}},[s._v("#")]),s._v(" 操作 "),t("code",[s._v("UTF-8")]),s._v(" 字符")]),s._v(" "),t("h6",{attrs:{id:"字符-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符-2"}},[s._v("#")]),s._v(" 字符")]),s._v(" "),t("p",[s._v("想要以 "),t("code",[s._v("Unicode")]),s._v(" 字符的方式遍历字符串，最好的办法是使用 "),t("code",[s._v("chars")]),s._v(" 方法")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"中国人"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chars")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h6",{attrs:{id:"字节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节"}},[s._v("#")]),s._v(" 字节")]),s._v(" "),t("p",[s._v("字符串的底层字节数组表现形式")]),s._v(" "),t("h6",{attrs:{id:"获取子串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取子串"}},[s._v("#")]),s._v(" 获取子串")]),s._v(" "),t("blockquote",[t("p",[s._v("由于 "),t("code",[s._v("Rust")]),s._v(" 的存储形态并不是人识别的字符，所以在取值的时候需要特别注意")])]),s._v(" "),t("p",[s._v("想要准确的从 "),t("code",[s._v("UTF-8")]),s._v(" 字符串中获取子串是较为复杂的事情，例如想要从 "),t("code",[s._v("holla中国人नमस्ते")]),s._v(" 这种变长的字符串中取出某一个子串，使用标准库你是做不到的。 你需要在 "),t("code",[s._v("crates.io")]),s._v(" 上搜索 "),t("code",[s._v("utf8")]),s._v(" 来寻找想要的功能。")]),s._v(" "),t("h6",{attrs:{id:"为什么-string-可变但-str-不可变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-string-可变但-str-不可变"}},[s._v("#")]),s._v(" 为什么 "),t("code",[s._v("String")]),s._v(" 可变但 "),t("code",[s._v("&str")]),s._v(" 不可变")]),s._v(" "),t("p",[s._v("因为 "),t("code",[s._v("&str")]),s._v(" 的数据是不可变的，存储在栈中的，能存储在栈中的数据都"),t("strong",[s._v("必须")]),s._v("占用已知且固定大小的内存空间，而 "),t("code",[s._v("String")]),s._v(" 的存在就是为了动态存储的，所以 "),t("code",[s._v("String")]),s._v(" 是存储在堆中的。")]),s._v(" "),t("h6",{attrs:{id:"如何手动释放内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何手动释放内存"}},[s._v("#")]),s._v(" 如何手动释放内存")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中提供了 "),t("code",[s._v("drop")]),s._v(" 函数来进行释放内存，默认离开变量的作用域时会自动释放内存，即，在 "),t("code",[s._v("}")]),s._v(" 的结尾会自动调用 "),t("code",[s._v("drop")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[s._v("#")]),s._v(" 元组")]),s._v(" "),t("p",[s._v("元组是由多种类型组合到一起形成的，因此它是复合类型，元组的长度是固定的，元组中元素的顺序也是固定的。")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" tup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("注：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("元组不具备任何清晰的含义")])])])]),s._v(" "),t("h4",{attrs:{id:"如何取元祖中的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何取元祖中的值"}},[s._v("#")]),s._v(" 如何取元祖中的值")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" tup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("f64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 . 来访问元组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tup index 1 {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("tup"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用匹配模式取值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The value of y is: {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[s._v("#")]),s._v(" 使用场景")]),s._v(" "),t("ul",[t("li",[s._v("使用元组返回多个值")])]),s._v(" "),t("h4",{attrs:{id:"注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[s._v("#")]),s._v(" 注意")]),s._v(" "),t("ul",[t("li",[s._v("目前 "),t("code",[s._v("Rust")]),s._v(" 打印元组的时候最多只能是 "),t("code",[s._v("12")]),s._v(" 个，这是因为 "),t("code",[s._v("Rust")]),s._v(" 标准库中对于元组实现  "),t("code",[s._v("Debug trait")]),s._v(" 有一个限制：只有长度小于或等于 "),t("code",[s._v("12")]),s._v(" 的元组才自动实现了  "),t("code",[s._v("Debug trait")]),s._v("。这意味着可以打印长度最多为 "),t("code",[s._v("12")]),s._v(" 的元组，但是对于更长的元组，你必须手动实现  "),t("code",[s._v("Debug")])])]),s._v(" "),t("h3",{attrs:{id:"结构体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[s._v("#")]),s._v(" 结构体")]),s._v(" "),t("ul",[t("li",[s._v("由多种类型组合而成")]),s._v(" "),t("li",[s._v("结构体可以为内部的每个字段起一个富有含义的名称")])]),s._v(" "),t("h4",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),t("h5",{attrs:{id:"定义结构体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义结构体"}},[s._v("#")]),s._v(" 定义结构体")]),s._v(" "),t("p",[t("strong",[s._v("组成")])]),s._v(" "),t("ul",[t("li",[s._v("通过关键字 "),t("code",[s._v("struct")]),s._v(" 定义")]),s._v(" "),t("li",[s._v("一个清晰明确的结构体「名称」")]),s._v(" "),t("li",[s._v("几个有名字的结构体「字段」")])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    active"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    sign_in_count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("初始化")])]),s._v(" "),t("ol",[t("li",[s._v("初始化实例时，"),t("strong",[s._v("每个字段")]),s._v("都"),t("strong",[s._v("必须")]),s._v("要进行初始化")]),s._v(" "),t("li",[s._v("初始化时的字段顺序"),t("strong",[s._v("不需要")]),s._v("和结构体定义时的顺序一致")])]),s._v(" "),t("p",[t("strong",[s._v("取值")])]),s._v(" "),t("p",[s._v("直接使用 "),t("code",[s._v(".")]),s._v(" 来进行取值，比如上面的 "),t("code",[s._v("User")]),s._v(" 结构体中要获取 "),t("code",[s._v("username")]),s._v(" 字段的值，可以使用 "),t("code",[s._v("User.username")]),s._v(" 来获取，当然 "),t("code",[s._v("User")]),s._v(" 得替换为你声明的变量")]),s._v(" "),t("p",[t("strong",[s._v("修改结构体的值")])]),s._v(" "),t("p",[s._v("在定义结构体的时候标记上 "),t("code",[s._v("mut")]),s._v(" 修饰符，就可以修改结构体的值了")]),s._v(" "),t("p",[t("strong",[s._v("简化写法初始化")])]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Rust")]),s._v(" 中，如果函数参数和结构体字段同名时，可以直接使用缩略的方式进行初始化，即下面的简化写法")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常规写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("build_user")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        active"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        sign_in_count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 简化写法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("build_user")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        active"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        sign_in_count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("strong",[s._v("简化更新")])]),s._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[s._v("..struct")]),s._v(" 表示凡是没有显示声明的字段，全部从 "),t("code",[s._v("..struct")]),s._v(" 后面的变量结构体中自动获取，注意："),t("code",[s._v("..struct")]),s._v(" 必须放在赋值的结构体的尾部使用，让 "),t("code",[s._v("Rust")]),s._v(" 知道是从哪里开始取值，否则会报错。")]),s._v(" "),t("li",[s._v("结构体更新值从上一个结构体中取值的时候注意类型，"),t("a",{attrs:{href:"#%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92"}},[s._v("基础类型")]),s._v("赋值的时候实际上是 "),t("code",[s._v("Copy")]),s._v(" 而其它类型则是"),t("strong",[s._v("所有权")]),s._v("进行了转移，即下面的 "),t("code",[s._v("username")]),s._v(" 这个字段无法在 "),t("code",[s._v("user1")]),s._v(" 中使用了。"),t("strong",[s._v("把结构体中具有所有权的字段转移出去后，将无法再访问该字段，但是可以正常访问其它的字段")])])])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常规更新")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" user2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    active"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" user1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("active"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" user1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"another@example.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    sign_in_count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" user1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sign_in_count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 简化更新")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" user2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"another@example.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("user1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h5",{attrs:{id:"元组结构体-tuple-struct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组结构体-tuple-struct"}},[s._v("#")]),s._v(" 元组结构体("),t("code",[s._v("Tuple Struct")]),s._v(")")]),s._v(" "),t("p",[s._v("结构体必须要有名称，但是结构体的字段可以没有名称，这种结构体长得很像元组，因此被称为元组结构体")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Color")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" black "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Color")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" origin "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"使用-derive-debug-来打印结构体的信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-derive-debug-来打印结构体的信息"}},[s._v("#")]),s._v(" 使用 "),t("code",[s._v("#[derive(Debug)]")]),s._v(" 来打印结构体的信息")]),s._v(" "),t("p",[s._v("如果使用以下代码，在编辑器内就会直接报错了，提示 "),t("code",[s._v("`User` 不实现 `Debug` (`{:?}` 需要)")]),s._v("，这时候就需要在结构体前面上面加上 "),t("code",[s._v("#[derive(Debug)]")]),s._v(" ，这样 "),t("code",[s._v("Rust")]),s._v(" 就会自动为结构体实现 "),t("code",[s._v("Debug")]),s._v(" 这个 trait，这样就可以直接使用 "),t("code",[s._v("println!")]),s._v(" 来打印结构体了。")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #[derive(Debug)]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12@qq.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"username: {:?}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("如果要完整的输出错误信息，建议将 "),t("code",[s._v("println!")]),s._v(" 替换为 "),t("code",[s._v("dbg!")]),s._v(" 输出的内容为：代码所在的文件名、行号、表达式以及表达式的值。")]),s._v(" "),t("p",[s._v("如果将上述的代码替换为 "),t("code",[s._v('dbg!("username: {:?}",u);')]),s._v("，则输出的结果为：")]),s._v(" "),t("div",{staticClass:"language-log line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-log"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"username: {:?}"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"username: {:?}"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" User "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("username:")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("age:")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("email:")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12@qq.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("注意：")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("rust")]),s._v(" 不会默认实现 "),t("code",[s._v("Debug")]),s._v("，我们可以采用：手动实现；使用 "),t("code",[s._v("derive")]),s._v(" 来进行实现")]),s._v(" "),t("li",[t("code",[s._v("dbg!")]),s._v(" 输出到标准错误输出 "),t("code",[s._v("stderr")]),s._v("，而 "),t("code",[s._v("println!")]),s._v(" 输出到标准输出 "),t("code",[s._v("stdout")])])]),s._v(" "),t("h3",{attrs:{id:"枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[s._v("#")]),s._v(" 枚举")]),s._v(" "),t("p",[s._v("关键词："),t("code",[s._v("enum")])]),s._v(" "),t("blockquote",[t("p",[s._v("枚举类型是一个类型，它会包含所有可能的枚举成员, 而枚举值是该类型中的具体某个成员的实例。")])]),s._v(" "),t("p",[s._v("注意：目前枚举值还不能带有值，只能使用结构体来实现")]),s._v(" "),t("h3",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中数组有两种：")]),s._v(" "),t("ul",[t("li",[s._v("固定长度的数组 "),t("code",[s._v("arry")])]),s._v(" "),t("li",[s._v("动态增长的数组 "),t("code",[s._v("Vector")])])]),s._v(" "),t("h4",{attrs:{id:"固定长度的数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#固定长度的数组"}},[s._v("#")]),s._v(" 固定长度的数组")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 基础")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明数组类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重复数据的数组，以下为数组长度为5，每个元素都是3。即[3,3,3,3,3]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意数组中的元素为非基础类型并且长度还比较长的固定数组时，应该考虑类似 `std::array::from_fn` 来进行处理")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"动态增长的数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态增长的数组"}},[s._v("#")]),s._v(" 动态增长的数组")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("vec!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"访问数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问数组"}},[s._v("#")]),s._v(" 访问数组")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a[0] = {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 访问第一个元素")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a[1] = {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 访问第二个元素")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"越界访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#越界访问"}},[s._v("#")]),s._v(" 越界访问")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a[6] = {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 运行结果：thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 6', src/main.rs:6:18")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[s._v("#")]),s._v(" 循环")]),s._v(" "),t("h3",{attrs:{id:"分支控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支控制"}},[s._v("#")]),s._v(" 分支控制")]),s._v(" "),t("p",[s._v("基本上是 "),t("code",[s._v("if")]),s._v(" 这个没什么好说的，各个语言都有，使用和语法大差不差")]),s._v(" "),t("h3",{attrs:{id:"循环-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环-2"}},[s._v("#")]),s._v(" 循环")]),s._v(" "),t("h4",{attrs:{id:"for-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[s._v("#")]),s._v(" "),t("code",[s._v("for")]),s._v(" 循环")]),s._v(" "),t("p",[s._v("语法")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 基础结构")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" 元素 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 集合"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("table",[t("thead",[t("tr",[t("th",[s._v("使用方法")]),s._v(" "),t("th",[s._v("等价使用方式")]),s._v(" "),t("th",[s._v("所有权")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("for item in collection")])]),s._v(" "),t("td",[t("code",[s._v("for item in IntoIterator::into_iter(collection)")])]),s._v(" "),t("td",[s._v("转移所有权")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("for item in &collection")])]),s._v(" "),t("td",[t("code",[s._v("for item in collection.iter()")])]),s._v(" "),t("td",[s._v("不可变借用")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("for item in &mut collection")])]),s._v(" "),t("td",[t("code",[s._v("for item in collection.iter_mut()")])]),s._v(" "),t("td",[s._v("可变借用")])])])]),s._v(" "),t("h2",{attrs:{id:"模式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配"}},[s._v("#")]),s._v(" 模式匹配")]),s._v(" "),t("h3",{attrs:{id:"match-和-if-let"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match-和-if-let"}},[s._v("#")]),s._v(" "),t("code",[s._v("match")]),s._v(" 和 "),t("code",[s._v("if let")])]),s._v(" "),t("blockquote",[t("p",[s._v("模式匹配最常用的就是 "),t("code",[s._v("match")]),s._v(" 和 "),t("code",[s._v("if let")])])]),s._v(" "),t("h4",{attrs:{id:"match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[s._v("#")]),s._v(" "),t("code",[s._v("match")])]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("match")]),s._v(" 和其他语言中的 "),t("code",[s._v("switch")]),s._v(" 非常像，"),t("code",[s._v("_")]),s._v(" 类似 "),t("code",[s._v("switch")]),s._v(" 中的 "),t("code",[s._v("default")]),s._v("。")])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 语法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" target "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    模式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" 表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    模式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        语句"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        语句"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    _ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" 表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h5",{attrs:{id:"match-表达式赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match-表达式赋值"}},[s._v("#")]),s._v(" "),t("code",[s._v("match")]),s._v(" 表达式赋值")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("match")]),s._v(" 本身也是一个表达式，因此可以用它来进行赋值")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('```rust\n    enum IpAddr{\n        Ipv4,\n        Ipv6,\n    }\n    fn main() {\n        let ip1 = IpAddr::Ipv4;\n        let ip_str = match ip1 {\n            IpAddr::Ipv4 => "127.0.0.1",\n            _ => "::1",\n        }\n    }\n    // 输出结果为 ::1\n```\n')])])]),t("h5",{attrs:{id:"match-绑定模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match-绑定模式"}},[s._v("#")]),s._v(" "),t("code",[s._v("match")]),s._v(" 绑定模式")]),s._v(" "),t("p",[s._v("没看懂")]),s._v(" "),t("h5",{attrs:{id:"穷尽匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#穷尽匹配"}},[s._v("#")]),s._v(" 穷尽匹配")]),s._v(" "),t("blockquote",[t("p",[s._v("简单来说就是枚举的所有成员都必须被匹配到，否则编译器会报错")])]),s._v(" "),t("h5",{attrs:{id:"通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[s._v("#")]),s._v(" "),t("code",[s._v("_")]),s._v(" 通配符")]),s._v(" "),t("p",[s._v("顾名思义，不是特别想把每个值都写一次的情况下采用通配符也可以解决这个问题")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" some_u8_value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0u8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" some_u8_value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"three"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"five"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"seven"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    _ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个写法是不报错的，这也就是上面所说的 `_` 等同于其他语言中的 `default`，其他语言中的 `default` 可以省略，但是在 `rust` 中可不能省略，不然编译不予通过")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"if-let"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-let"}},[s._v("#")]),s._v(" "),t("code",[s._v("if let")])]),s._v(" "),t("p",[t("code",[s._v("match")]),s._v(" 的语法是可以包括 "),t("code",[s._v("if let")]),s._v(" 的，但是在只处理一个模式的情况下采用 "),t("code",[s._v("match")]),s._v(" 就比较麻烦了，因此 "),t("code",[s._v("if let")]),s._v(" 就出现了，语法如下：")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" 模式 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 表达式 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"three"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("blockquote",[t("p",[s._v("当你只要匹配一个条件，且忽略其他条件时就用 "),t("code",[s._v("if let")]),s._v(" ，否则都用 "),t("code",[s._v("match")])])]),s._v(" "),t("h4",{attrs:{id:"matches-宏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#matches-宏"}},[s._v("#")]),s._v(" "),t("code",[s._v("matches!")]),s._v(" 宏")]),s._v(" "),t("p",[s._v("它可以将一个表达式跟模式进行匹配，然后返回匹配的结果 "),t("code",[s._v("true or false")])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'f'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("matches!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'A'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..=")]),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'Z'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..=")]),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'z'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" bar "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("matches!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"变量遮蔽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量遮蔽"}},[s._v("#")]),s._v(" 变量遮蔽")]),s._v(" "),t("p",[t("code",[s._v("match")]),s._v(" 中的变量遮蔽其实不是那么的容易看出，因此要小心！其实这里最好不要使用同名，避免难以理解")]),s._v(" "),t("h3",{attrs:{id:"解构-option"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解构-option"}},[s._v("#")]),s._v(" 解构 "),t("code",[s._v("Option")])]),s._v(" "),t("blockquote",[t("p",[s._v("一个变量要么有值："),t("code",[s._v("Some(T)")]),s._v(", 要么为空："),t("code",[s._v("None")])])]),s._v(" "),t("h3",{attrs:{id:"模式适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式适用场景"}},[s._v("#")]),s._v(" 模式适用场景")]),s._v(" "),t("h4",{attrs:{id:"模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式"}},[s._v("#")]),s._v(" 模式")]),s._v(" "),t("p",[s._v("模式是 "),t("code",[s._v("Rust")]),s._v(" 中的特殊语法，它用来匹配类型中的结构和数据，它往往和 "),t("code",[s._v("match")]),s._v(" 表达式联用，以实现强大的模式匹配能力。模式一般由以下内容组合而成：")]),s._v(" "),t("ul",[t("li",[s._v("字面值")]),s._v(" "),t("li",[s._v("解构的数组、枚举、结构体或者元组")]),s._v(" "),t("li",[s._v("变量")]),s._v(" "),t("li",[s._v("通配符")]),s._v(" "),t("li",[s._v("占位符")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意, 只使用 "),t("code",[s._v("_")]),s._v(" 和使用以下划线开头的名称有些微妙的不同：比如 "),t("strong",[t("code",[s._v("_x")]),s._v(" 仍会将值绑定到变量，而 "),t("code",[s._v("_")]),s._v(" 则完全不会绑定")]),s._v("。")])]),s._v(" "),t("h2",{attrs:{id:"方法-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法-method"}},[s._v("#")]),s._v(" 方法 "),t("code",[s._v("Method")])]),s._v(" "),t("blockquote",[t("p",[s._v("在 "),t("code",[s._v("Rust")]),s._v(" 中方法往往和结构体、枚举、特征("),t("code",[s._v("Trait")]),s._v(")一起使用")])]),s._v(" "),t("h3",{attrs:{id:"self、-self-和-mut-self"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self、-self-和-mut-self"}},[s._v("#")]),s._v(" "),t("code",[s._v("self")]),s._v("、"),t("code",[s._v("&self")]),s._v(" 和 "),t("code",[s._v("&mut self")])]),s._v(" "),t("p",[t("code",[s._v("&self")]),s._v("：其实是 "),t("code",[s._v("self: &Self")]),s._v(" 的简写 "),t("strong",[s._v("（注意大小写）")]),s._v("，简单的理解就是当前在为哪个结构体实现方法，那么 "),t("code",[s._v("self")]),s._v(" 就是指哪个结构体")]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("self")]),s._v(" 依旧有所有权的概念")]),s._v(" "),t("li",[t("code",[s._v("self")]),s._v(" 表示当前结构体转移到方法中，因此 "),t("code",[s._v("self")]),s._v(" 不能再被使用")]),s._v(" "),t("li",[t("code",[s._v("&self")]),s._v(" 表示该方法对原结构体不可变的借用")]),s._v(" "),t("li",[t("code",[s._v("&mut self")]),s._v(" 表示该方法对原结构体可变的借用")])]),s._v(" "),t("p",[t("code",[s._v("self")]),s._v(" 的使用和函数的参数一样，都严格遵循 "),t("code",[s._v("Rust")]),s._v(" 的所有权规则")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("Rust")]),s._v(" 中有一个约定俗成的规则，使用 "),t("code",[s._v("new")]),s._v(" 来作为构造器的名称，出于设计上的考虑，"),t("code",[s._v("Rust")]),s._v(" 特地没有用 "),t("code",[s._v("new")]),s._v(" 作为关键字。")])]),s._v(" "),t("h3",{attrs:{id:"self-和-self-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self-和-self-有什么区别"}},[s._v("#")]),s._v(" "),t("code",[s._v("self")]),s._v(" 和 "),t("code",[s._v("Self")]),s._v(" 有什么区别")]),s._v(" "),t("h4",{attrs:{id:"self"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self"}},[s._v("#")]),s._v(" "),t("code",[s._v("self")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("self")]),s._v(" 是一个关键字，用于表示方法的接收者")]),s._v(" "),t("li",[s._v("它通常在方法的第一个参数位置，表示当前实例")]),s._v(" "),t("li",[t("code",[s._v("self")]),s._v(" 可以是 "),t("code",[s._v("&self")]),s._v("、"),t("code",[s._v("&mut self")]),s._v("、"),t("code",[s._v("self")]),s._v("，它们分别表示当前实例的不可变借用、可变借用和所有权")])]),s._v(" "),t("h4",{attrs:{id:"self-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self-2"}},[s._v("#")]),s._v(" "),t("code",[s._v("Self")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Self")]),s._v(" 是一个类型别名，用于表示当前实例的类型")]),s._v(" "),t("li",[s._v("它通常在方法的返回值位置，表示当前实例的类型")]),s._v(" "),t("li",[t("code",[s._v("Self")]),s._v(" 可以作返回值类型，表示返回与当前类型相同的实例")])]),s._v(" "),t("h2",{attrs:{id:"范型和特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#范型和特征"}},[s._v("#")]),s._v(" 范型和特征")]),s._v(" "),t("h3",{attrs:{id:"泛型-generics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型-generics"}},[s._v("#")]),s._v(" 泛型 "),t("code",[s._v("Generics")])]),s._v(" "),t("h4",{attrs:{id:"范型详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#范型详解"}},[s._v("#")]),s._v(" 范型详解")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("在 "),t("code",[s._v("Rust")]),s._v(" 中，范型参数的名称可以任意起，出于惯性通常使用 "),t("code",[s._v("T")]),s._v(" 来作为首选，注意：除非需要表达含义，否则尽量只用一个字母来表达")])]),s._v(" "),t("li",[t("p",[s._v("因 "),t("code",[s._v("T")]),s._v(" 代表任意类型，所以元素比较或者运算时，均需要其专属的函数来处理")])])]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 语法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("largest")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"结构体中使用范型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构体中使用范型"}},[s._v("#")]),s._v(" 结构体中使用范型")]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("提前声明，和范型函数定义类似，我们必须在使用范型参数之前要进行声明，然后才能在结构体的字段类型中使用 "),t("code",[s._v("T")]),s._v(" 来代替具体的类型")])]),s._v(" "),t("li",[t("p",[s._v("结构体中的两个属性的类型都为 "),t("code",[s._v("T")]),s._v("，那么它们必须是相同的类型，否则会抛出类型不匹配的错误")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("U")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这是错误的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这是正确的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("如果想让结构体中的属性既能类型相同，又能类型不同就需要使用不同的范型参数")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("U")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("U")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])])]),s._v(" "),t("h4",{attrs:{id:"枚举中使用范型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举中使用范型"}},[s._v("#")]),s._v(" 枚举中使用范型")]),s._v(" "),t("p",[t("code",[s._v("Option<T>")]),s._v(" 是一个拥有范型 "),t("code",[s._v("T")]),s._v(" 的美剧类型，它的第一个成员是 "),t("code",[s._v("Some<T>")]),s._v("，存放了一个类型为 "),t("code",[s._v("T")]),s._v(" 的值")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Rust")]),s._v(" 中还有一个 "),t("code",[s._v("Result")]),s._v(" 这个枚举，与 "),t("code",[s._v("Option")]),s._v(" 作用于值的存在与否不同，"),t("code",[s._v("Result")]),s._v(" 作用于值的结果，它可以是成功或者失败，成功时返回一个值，失败时返回一个错误信息")]),s._v(" "),t("h4",{attrs:{id:"方法中使用范型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法中使用范型"}},[s._v("#")]),s._v(" 方法中使用范型")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 通过在编译时进行泛型代码的 单态化("),t("code",[s._v("monomorphization")]),s._v(")来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。")]),s._v(" "),t("p",[s._v("编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。")]),s._v(" "),t("h2",{attrs:{id:"特征-trait"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特征-trait"}},[s._v("#")]),s._v(" 特征 "),t("code",[s._v("Trait")])]),s._v(" "),t("p",[t("strong",[s._v("一组可以被共享的行为，只要实现了特征，你就能使用这组行为")]),s._v(" ，理解的话当其他语言中的接口即可")]),s._v(" "),t("h2",{attrs:{id:"特征对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特征对象"}},[s._v("#")]),s._v(" 特征对象")]),s._v(" "),t("h3",{attrs:{id:"特征对象的动态分发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特征对象的动态分发"}},[s._v("#")]),s._v(" 特征对象的动态分发")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("特征独享大小不固定")])]),s._v(" "),t("li",[t("p",[s._v("几乎总是使用特征对象的引用方式")])])]),s._v(" "),t("h3",{attrs:{id:"self-和-self"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self-和-self"}},[s._v("#")]),s._v(" "),t("code",[s._v("Self")]),s._v(" 和 "),t("code",[s._v("self")])]),s._v(" "),t("p",[t("code",[s._v("self")]),s._v(" 指当前的实例对象，"),t("code",[s._v("Self")]),s._v(" 指当前实例的类型")]),s._v(" "),t("h3",{attrs:{id:"特征对象的限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特征对象的限制"}},[s._v("#")]),s._v(" 特征对象的限制")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("方法的返回类型不能是 "),t("code",[s._v("Self")])])]),s._v(" "),t("li",[t("p",[s._v("方法没有任何范型参数")])])])])],1)}),[],!1,null,null,null);t.default=e.exports}}]);